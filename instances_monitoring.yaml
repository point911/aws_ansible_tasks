- name: Install some dependencies
  apt: name={{ item }} state=installed
  with_items:
    - unzip
    - python-pip
    - libwww-perl
    - libdatetime-perl

- name: Install python dependencies
  pip: name={{ item }} state=present
  with_items:
    - boto
    - boto3
    - awscli


- name: Download default AWS monitoring script
  get_url:
    url: http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip
    dest: /tmp/CloudWatchMonitoringScripts-1.2.1.zip
    mode: 0444

- name: Delete scripts if exist
  file: path=/home/ubuntu/aws-scripts-mon state=absent

- name: Unpack archive with monitoring scripts
  shell: unzip /tmp/CloudWatchMonitoringScripts-1.2.1.zip -d /home/ubuntu/

- name: Send initial data for creating metrics at Cloudwatch
  shell: /home/ubuntu/aws-scripts-mon/mon-put-instance-data.pl --aws-access-key-id={{ lookup('env','AWS_ACCESS_KEY') }} --aws-secret-key={{ lookup('env','AWS_SECRET_KEY') }} --mem-util --disk-space-util --disk-path=/

- name: Update cron entry
  cron:
    minute: 5
    user: "root"
    job: "/home/ubuntu/aws-scripts-mon/mon-put-instance-data.pl --aws-access-key-id={{ lookup('env','AWS_ACCESS_KEY') }} --aws-secret-key={{ lookup('env','AWS_SECRET_KEY') }} --mem-util --disk-space-util --disk-path=/ --from-cron"

- name: Setup alerting for instances
  ec2_metric_alarm:
    state: "{{ alarm_state }}"
    region: "{{ lookup('env','AWS_REGION') }}"
    name: "{{ ec2_tag_Name }}-{{ item.name }}"
    metric: "{{ item.type }}"
    statistic: "Average"
    comparison: "{{ item.comparator }}"
    threshold: "{{ item.threshold }}"
    unit: "{{ item.unit }}"
    period: "{{ item.period }}"
    evaluation_periods: "{{ item.evaluation_periods }}"
    description: "It will be triggered when {{ item.name }} is more than {{ item.threshold }}% for {{ item.period|int / 60 }} minutes"
    dimensions: InstanceId="{{ ec2_id }}"
    alarm_actions: "{{ item.alarm_topic }}"
    ok_actions: "{{ item.ok_topic }}"
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_KEY') }}"
    namespace: "{{ item.namespace }}"
  register: created_alering
  with_items: "{{ env.aws.alerting}}"